generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ARTIST
  USER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  username String @unique
  password String

  googleId String? @unique

  isVerified Boolean @default(false)
  role       Role    @default(USER)
  avatar     String? @default("")
  isOurUser  Boolean @default(true)

  verificationCode          String?   @default("")
  verificationCodeExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recentPlayed RecentPlayed[]
  Playlist     Playlist[]

  @@map("users")
}

model RecentPlayed {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  trackId   String
  title     String // Track title
  artist    Json // Artist object with full details
  artwork   String? // Track artwork URL
  duration  Int // Track duration in seconds
  genre     String? // Track genre
  playedAt  DateTime  @default(now()) // When user played the song
  createdAt DateTime? // When the song was originally created/uploaded

  // Relation to User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique(trackId)
  @@index([userId])
  @@map("recent_played")
}

model Playlist {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isPublic    Boolean @default(true)

  // Relation to User (who created the playlist)
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Playlist tracks
  tracks PlaylistTrack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("playlists")
}

model PlaylistTrack {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  trackId  String
  title    String
  artist   Json
  artwork  String?
  duration Int
  genre    String?
  addedAt  DateTime @default(now())

  // Relation to Playlist
  playlistId String   @db.ObjectId
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@map("playlist_tracks")
}
