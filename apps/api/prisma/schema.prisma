generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ARTIST
  USER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  username String @unique
  password String

  googleId String?

  isVerified Boolean @default(false)
  role       Role    @default(USER)
  avatar     String? @default("")
  isOurUser  Boolean @default(true)

  verificationCode          String?   @default("")
  verificationCodeExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recentPlayed RecentPlayed[]
  Playlist     Playlist[]
  tracks       Track[] // User's uploaded tracks
  likes        Like[] // Tracks user has liked

  // Following/Followers
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")

  @@map("users")
}

// User following/followers relationship
model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Follower (who is following)
  followerId String @db.ObjectId
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  // Following (who is being followed)
  followingId String @db.ObjectId
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

// Internal track model for user uploads
model Track {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  artwork     String? // Track artwork URL (Cloudinary)
  duration    Int // Duration in seconds
  genre       String?

  // Cloudinary stream URL
  streamUrl String // Stream URL for playback (Cloudinary)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Track likes
  likes Like[]

  // Playlist tracks
  playlistTracks PlaylistTrack[]

  // Recent played entries
  recentPlayed RecentPlayed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([genre])
  @@map("tracks")
}

// Track likes
model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // User who liked the track
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Track that was liked
  trackId String @db.ObjectId
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([userId])
  @@index([trackId])
  @@map("likes")
}

model RecentPlayed {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  trackId   String
  title     String // Track title
  artistId  String // Only store the artist ID
  artwork   String? // Track artwork URL
  duration  Int // Track duration in seconds
  genre     String? // Track genre
  playedAt  DateTime  @default(now()) // When user played the song
  createdAt DateTime? // When the song was originally created/uploaded

  // Relation to User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Relation to Track (for internal tracks only)
  track Track? @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([trackId])
  @@map("recent_played")
}

model Playlist {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  isPublic    Boolean @default(true)
  genre       String? // Playlist genre

  // Relation to User (who created the playlist)
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Playlist tracks
  tracks PlaylistTrack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([genre])
  @@map("playlists")
}

model PlaylistTrack {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  trackId  String // Can be SoundCloud ID (string) or internal Track ID (ObjectId string)
  title    String?
  artistId String? // Artist ID (string)
  artwork  String?
  duration Int?
  genre    String?
  addedAt  DateTime @default(now())

  // Relation to Playlist
  playlistId String   @db.ObjectId
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  // Relation to Track (for internal tracks only)
  track Track? @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@index([trackId])
  @@index([artistId])
  @@map("playlist_tracks")
}
